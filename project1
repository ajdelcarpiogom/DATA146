# Project 1

### Package - A namespace that organizes a set of related classes and interfaces. It's very similar to different folders on your computer.
### Library - Contains data types that would normally be considered part of the “core” of a language, such as numbers and lists.

### In order to install a package and make it accessible to my workspace in Python, we must do import() and library()
  ### import numpy as np
  ### library(np)
  
  ### import pandas as pd
  ### library(pd)


### DataFrame - The most common structured API and represents a table of data with rows and columns.
  ### A library of functions that specifically make it easier to work with dataframes is pandas.
  
### In order to read a file in its remote location within the file system of your operating system, we will use read_csv()
  ### For example:
  ### data = data.read_csv("file")
  
  
### The read() method returns the specified number of bytes from the file. Default is -1 which means the whole file.

### Data that is saved as a file in a different type of format requires a particular argument in order to inform Python that our data is in a different format, we need to add an additional argument following the path_to_data object. We can use the \t specification if separated by tabs.
### Also, provide an example that describes the dataframe you created:
  ### cars = {"Make": ["Honda", "Toyota", "Ford"], "Price": [22, 25, 28]}
  ### df = pd.DataFrame(cars, columns = ["Make", "Price")
  
### In order to determine rows and columns in a dataframe, we can do:
  ### df.shape() in order to get the number of rows and columns.
  ### len(df) in order to get the number of rows.
  ### len(df.columns) in order to get the number of columns.
  
### Other terminology for a row and a column can be "tuple".








### .iloc gets rows (or columns) at particular positions in the index (so it only takes integers) whereas .loc gets rows (or columns) with particular labels from the index.
